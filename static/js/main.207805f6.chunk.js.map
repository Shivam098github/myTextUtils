{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","about","style","cursor","onClick","toggleMode","class","htmlFor","TextForm","useState","text","setText","words","setwords","setletters","spaces","setspaces","color","heading","value","backgroundColor","onChange","event","target","console","log","length","rows","changeNoti","newText","toUpperCase","toLocaleLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","border","reduce","a","v","match","About","Alert","alert","role","msg","App","setMode","setAlert","toast","success","body","path","showalert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.207805f6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n                            </li>\r\n\r\n                        </ul>\r\n                        <form className=\"d-flex\">\r\n                            {/* <button className=\"btn btn-outline-danger mx-2\" type=\"submit\">Dark</button>\r\n                    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/> */}\r\n                            {/* <button className=\"btn btn-outline-danger\" type=\"submit\">Night</button> */}\r\n                            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`} >\r\n                                <input className=\"form-check-input\" style={{cursor: \"pointer\"}} onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                                <label class =\"form-check-label\" style={{cursor: \"pointer\"}} htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('')\r\n    const [words, setwords] = useState(0)\r\n    const [letters, setletters] = useState(0)\r\n    const [spaces, setspaces] = useState(0)\r\n    // setText('No input');\r\n    const handleUpClick=()=>{\r\n        // console.log(text);\r\n        props.changeNoti(\"Converted to Upper Case\")\r\n        // props.notify()\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        \r\n    }\r\n    const handleLoClick=()=>{\r\n        let newText=text.toLocaleLowerCase();\r\n        setText(newText);\r\n        props.changeNoti('Converted to Lower Case')\r\n        // props.showalert(\"converted to lower case\",\"warning\")\r\n    }\r\n    const clearText=()=>{\r\n        setText('')\r\n        props.changeNoti('Text Cleared')\r\n    }\r\n    const copyText=()=>{\r\n        let text=document.getElementById(\"exampleFormControlTextarea1\")\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        props.changeNoti(\"Text Copied\")\r\n        // props.changeNoti('Text Copied')\r\n    }\r\n    const removeExtraSpaces=()=>{\r\n        let newText=text.split(/[ ]+/g)\r\n        setText(newText.join(\" \"))\r\n        props.changeNoti('Extra Spaces Removed')\r\n    }\r\n    let i,j;\r\n    const handleOnChange=(event)=>{\r\n        // console.log('ONchange was clicked');\r\n        setText(event.target.value);\r\n        console.log(text);\r\n        if(text[text.length-1]===\" \" && text[text.length-2]!==\" \")\r\n        setwords(words+1)\r\n        if(text[text.length-1]===\" \")\r\n        setspaces(spaces+1);\r\n        setletters(text.length-spaces);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n                \r\n                <div className=\"mb-3\">\r\n                <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\"><h2>{props.heading}</h2></label>\r\n                <textarea className=\"form-control\" value={text} style={{backgroundColor:props.mode==='dark'?'#042743':'white',color:props.mode==='dark'?'white':'black'}} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-warning mx-2\" onClick={handleUpClick}>Convert to Upper Case</button>\r\n                <button className=\"btn btn-warning mx-2\" onClick={handleLoClick}>Convert to Lower Case</button>\r\n                <button className=\"btn btn-warning mx-2\" onClick={clearText}>Clear Text</button>\r\n                <button className=\"btn btn-warning mx-2\" onClick={copyText}>Copy Text</button>\r\n                <button className=\"btn btn-warning mx-2\" onClick={removeExtraSpaces}>Remove extra spaces</button>\r\n        </div>\r\n        <div className=\"container\" style={{color:props.mode==='light'?'black':'white',border:`2px solid ${props.mode==='light'?'black':'white'}`}}>\r\n            <h1>Text Summary</h1>\r\n            <p>{text.split(' ').length-text.split(' ').reduce((a, v) => (v === '' ? a + 1 : a), 0)} words and {text.length-(text.match(/ /g) || []).length} characters</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.type}: {props.alert.msg}</strong>\r\n                {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  \n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n  // const [tText, settText] = useState('')\n  const changeNoti = (msg) => {\n    \n    \n    // settText(msg);\n\n    // console.log(msg)\n    // console.log(tText)\n    notify()\n    // console.log(tText)\n    function notify() {\n      return toast.success(msg);\n    }\n  }\n  \n  \n  \n  const showAlert = (msg, type) => {\n    setAlert({\n      msg: msg,\n      type: type\n    }\n    )\n    \n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = 'black'\n      changeNoti(\"Dark Mode Enabled\")\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      changeNoti(\"Light Mode Enabled\")\n    }\n  }\n  return (\n    <>\n      <Router>\n        <ToastContainer/>\n        <Navbar title=\"TextUtils\" about=\"About TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            <TextForm changeNoti={changeNoti} showalert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />\n          </Route>\n\n        </Switch>\n      </Router>\n      {/* <About/> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}